<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  ~ Copyright (c) 2011. Purple Door Systems, BV.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

    <!--
         Turns on support for mapping requests to Spring MVC @Controller
         methods Also registers default Formatters and Validators for use
         across all @Controllers
     -->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator">
        <mvc:argument-resolvers>
            <bean class="org.springframework.mobile.device.DeviceWebArgumentResolver"/>
            <bean class="org.springframework.mobile.device.site.SitePreferenceWebArgumentResolver"/>
        </mvc:argument-resolvers>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
                <property name="supportedMediaTypes" value="application/json"/>
                <property name="objectMapper">
                    <bean class="com.lela.util.utilities.jackson.CustomObjectMapper"/>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor">
        <property name="validator" ref="validator"/>
    </bean>

    <bean id="validator"
          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="messageInterpolator">
            <bean class="org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator">
                <constructor-arg index="0">
                    <bean class="org.springframework.validation.beanvalidation.MessageSourceResourceBundleLocator">
                        <constructor-arg index="0" ref="messageSource"/>
                    </bean>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <!--
         selects a static view for rendering without the need for an explicit
         controller
     -->
    <mvc:view-controller path="/uncaughtException"/>
    <mvc:view-controller path="/resourceNotFound"/>
    <mvc:view-controller path="/dataAccessFailure"/>
    <mvc:view-controller path="/internalServerError "/>

    <bean id="parentMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <!-- a message source has fifo rules so an environment specific file needs to be placed on top -->
        <property name="basenames">
            <list>
                <value>${environment}</value>
                <value>application</value>
                <value>errors</value>
            </list>
        </property>
    </bean>

    <!--
         Resolves localized messages*.properties and application.properties files in the application to allow for internationalization. The messages*.properties files translate Roo generated messages which are part of the admin interface, the application.properties resource bundle localizes all application
         specific messages such as entity names and menu items.
     -->
    <bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource" id="messageSource"
          p:parentMessageSource-ref="parentMessageSource"
          p:basenames="WEB-INF/i18n/message,WEB-INF/i18n/referencedata,WEB-INF/i18n/affiliate-babyage"
          p:fallbackToSystemLocale="false"
          p:cacheSeconds="10"
          p:useCodeAsDefaultMessage="true"/>

    <!-- store preferred language configuration in a cookie -->
    <bean class="com.lela.commons.web.utils.CustomLocaleResolver" id="localeResolver" p:cookieName="locale" p:defaultLocale="en_US">
        <constructor-arg ref="userService"/>
    </bean>

    <!--
         resolves localized <theme_name>.properties files in the classpath to
         allow for theme support
     -->
    <bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource"/>

    <!-- store preferred theme configuration in a cookie -->
    <bean class="org.springframework.web.servlet.theme.CookieThemeResolver" id="themeResolver" p:cookieName="theme" p:defaultThemeName="lela_theme"/>

    <!--
         This bean resolves specific types of exceptions to corresponding
         logical - view names for error views. The default behaviour of
         DispatcherServlet - is to propagate all exceptions to the servlet
         container: this will happen - here with all other types of exceptions.
     -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
        <property name="exceptionMappings">
            <props>
                <prop key=".DataAccessException">dataAccessFailure</prop>
                <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
                <prop key=".TypeMismatchException">resourceNotFound</prop>
                <prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
                <prop key=".NullPointerException">uncaughtException</prop>
                <prop key=".ArrayIndexOutOfBoundsException">uncaughtException</prop>
                <prop key=".MaxUploadSizeExceededException">max.size.exceeded.exception</prop>
            </props>
        </property>
    </bean>

    <!-- allows for integration of file upload functionality -->
    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
        <property name="maxUploadSize" value="${image.max.size}"/>
    </bean>
</beans>
