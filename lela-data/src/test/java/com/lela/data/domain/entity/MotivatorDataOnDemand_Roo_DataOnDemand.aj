// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.CategoryDataOnDemand;
import com.lela.data.domain.entity.Motivator;
import com.lela.data.domain.entity.MotivatorDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MotivatorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MotivatorDataOnDemand: @Component;
    
    private Random MotivatorDataOnDemand.rnd = new SecureRandom();
    
    private List<Motivator> MotivatorDataOnDemand.data;
    
    @Autowired
    CategoryDataOnDemand MotivatorDataOnDemand.categoryDataOnDemand;
    
    public void MotivatorDataOnDemand.setDateCreated(Motivator obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void MotivatorDataOnDemand.setDateModified(Motivator obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void MotivatorDataOnDemand.setMotivatorLabel(Motivator obj, int index) {
        Character motivatorLabel = new Character('N');
        obj.setMotivatorLabel(motivatorLabel);
    }
    
    public void MotivatorDataOnDemand.setRulesEngineDt(Motivator obj, int index) {
        String rulesEngineDt = "rulesEngineDt_" + index;
        if (rulesEngineDt.length() > 50) {
            rulesEngineDt = rulesEngineDt.substring(0, 50);
        }
        obj.setRulesEngineDt(rulesEngineDt);
    }
    
    public void MotivatorDataOnDemand.setRulesEngineEdd(Motivator obj, int index) {
        String rulesEngineEdd = "rulesEngineEdd_" + index;
        if (rulesEngineEdd.length() > 50) {
            rulesEngineEdd = rulesEngineEdd.substring(0, 50);
        }
        obj.setRulesEngineEdd(rulesEngineEdd);
    }
    
    public void MotivatorDataOnDemand.setSubCategoryId(Motivator obj, int index) {
        Integer subCategoryId = new Integer(index);
        obj.setSubCategoryId(subCategoryId);
    }
    
    public Motivator MotivatorDataOnDemand.getSpecificMotivator(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Motivator obj = data.get(index);
        Long id = obj.getId();
        return Motivator.findMotivator(id);
    }
    
    public Motivator MotivatorDataOnDemand.getRandomMotivator() {
        init();
        Motivator obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Motivator.findMotivator(id);
    }
    
    public boolean MotivatorDataOnDemand.modifyMotivator(Motivator obj) {
        return false;
    }
    
    public void MotivatorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Motivator.findMotivatorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Motivator' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Motivator>();
        for (int i = 0; i < 10; i++) {
            Motivator obj = getNewTransientMotivator(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
