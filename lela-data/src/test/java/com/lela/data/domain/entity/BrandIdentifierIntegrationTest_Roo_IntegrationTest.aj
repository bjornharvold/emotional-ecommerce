// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.BrandIdentifier;
import com.lela.data.domain.entity.BrandIdentifierDataOnDemand;
import com.lela.data.domain.entity.BrandIdentifierIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect BrandIdentifierIntegrationTest_Roo_IntegrationTest {
    
    declare @type: BrandIdentifierIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: BrandIdentifierIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: BrandIdentifierIntegrationTest: @Transactional;
    
    @Autowired
    BrandIdentifierDataOnDemand BrandIdentifierIntegrationTest.dod;
    
    @Test
    public void BrandIdentifierIntegrationTest.testCountBrandIdentifiers() {
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to initialize correctly", dod.getRandomBrandIdentifier());
        long count = BrandIdentifier.countBrandIdentifiers();
        Assert.assertTrue("Counter for 'BrandIdentifier' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void BrandIdentifierIntegrationTest.testFindBrandIdentifier() {
        BrandIdentifier obj = dod.getRandomBrandIdentifier();
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to provide an identifier", id);
        obj = BrandIdentifier.findBrandIdentifier(id);
        Assert.assertNotNull("Find method for 'BrandIdentifier' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'BrandIdentifier' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void BrandIdentifierIntegrationTest.testFindAllBrandIdentifiers() {
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to initialize correctly", dod.getRandomBrandIdentifier());
        long count = BrandIdentifier.countBrandIdentifiers();
        Assert.assertTrue("Too expensive to perform a find all test for 'BrandIdentifier', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<BrandIdentifier> result = BrandIdentifier.findAllBrandIdentifiers();
        Assert.assertNotNull("Find all method for 'BrandIdentifier' illegally returned null", result);
        Assert.assertTrue("Find all method for 'BrandIdentifier' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void BrandIdentifierIntegrationTest.testFindBrandIdentifierEntries() {
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to initialize correctly", dod.getRandomBrandIdentifier());
        long count = BrandIdentifier.countBrandIdentifiers();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<BrandIdentifier> result = BrandIdentifier.findBrandIdentifierEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'BrandIdentifier' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'BrandIdentifier' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void BrandIdentifierIntegrationTest.testFlush() {
        BrandIdentifier obj = dod.getRandomBrandIdentifier();
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to provide an identifier", id);
        obj = BrandIdentifier.findBrandIdentifier(id);
        Assert.assertNotNull("Find method for 'BrandIdentifier' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyBrandIdentifier(obj);
        Integer currentVersion = obj.getVersion();
        obj.flush();
        Assert.assertTrue("Version for 'BrandIdentifier' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void BrandIdentifierIntegrationTest.testMergeUpdate() {
        BrandIdentifier obj = dod.getRandomBrandIdentifier();
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to provide an identifier", id);
        obj = BrandIdentifier.findBrandIdentifier(id);
        boolean modified =  dod.modifyBrandIdentifier(obj);
        Integer currentVersion = obj.getVersion();
        BrandIdentifier merged = (BrandIdentifier)obj.merge();
        obj.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'BrandIdentifier' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void BrandIdentifierIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to initialize correctly", dod.getRandomBrandIdentifier());
        BrandIdentifier obj = dod.getNewTransientBrandIdentifier(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'BrandIdentifier' identifier to be null", obj.getId());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'BrandIdentifier' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void BrandIdentifierIntegrationTest.testRemove() {
        BrandIdentifier obj = dod.getRandomBrandIdentifier();
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'BrandIdentifier' failed to provide an identifier", id);
        obj = BrandIdentifier.findBrandIdentifier(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'BrandIdentifier' with identifier '" + id + "'", BrandIdentifier.findBrandIdentifier(id));
    }
    
}
