// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.Merchant;
import com.lela.data.domain.entity.MerchantDataOnDemand;
import com.lela.data.domain.entity.NetworkDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MerchantDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MerchantDataOnDemand: @Component;
    
    private Random MerchantDataOnDemand.rnd = new SecureRandom();
    
    private List<Merchant> MerchantDataOnDemand.data;
    
    @Autowired
    NetworkDataOnDemand MerchantDataOnDemand.networkDataOnDemand;
    
    public Merchant MerchantDataOnDemand.getNewTransientMerchant(int index) {
        Merchant obj = new Merchant();
        setAlwaysShowLocal(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setDirty(obj, index);
        setImageQuality(obj, index);
        setLelaUrl(obj, index);
        setLogoUrl(obj, index);
        setMerchantApproved(obj, index);
        setMerchantName(obj, index);
        setMerchantValid(obj, index);
        setObjectId(obj, index);
        setPopshopsId(obj, index);
        setReturnPolicy(obj, index);
        setUrl(obj, index);
        setUrlName(obj, index);
        return obj;
    }
    
    public void MerchantDataOnDemand.setAlwaysShowLocal(Merchant obj, int index) {
        Boolean alwaysShowLocal = Boolean.TRUE;
        obj.setAlwaysShowLocal(alwaysShowLocal);
    }
    
    public void MerchantDataOnDemand.setDateCreated(Merchant obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void MerchantDataOnDemand.setDateModified(Merchant obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void MerchantDataOnDemand.setDirty(Merchant obj, int index) {
        Boolean dirty = Boolean.TRUE;
        obj.setDirty(dirty);
    }
    
    public void MerchantDataOnDemand.setImageQuality(Merchant obj, int index) {
        Integer imageQuality = new Integer(index);
        obj.setImageQuality(imageQuality);
    }
    
    public void MerchantDataOnDemand.setLelaUrl(Merchant obj, int index) {
        String lelaUrl = "lelaUrl_" + index;
        if (lelaUrl.length() > 255) {
            lelaUrl = lelaUrl.substring(0, 255);
        }
        obj.setLelaUrl(lelaUrl);
    }
    
    public void MerchantDataOnDemand.setLogoUrl(Merchant obj, int index) {
        String logoUrl = "logoUrl_" + index;
        if (logoUrl.length() > 255) {
            logoUrl = logoUrl.substring(0, 255);
        }
        obj.setLogoUrl(logoUrl);
    }
    
    public void MerchantDataOnDemand.setMerchantApproved(Merchant obj, int index) {
        Boolean merchantApproved = Boolean.TRUE;
        obj.setMerchantApproved(merchantApproved);
    }
    
    public void MerchantDataOnDemand.setMerchantName(Merchant obj, int index) {
        String merchantName = "merchantName_" + index;
        if (merchantName.length() > 255) {
            merchantName = merchantName.substring(0, 255);
        }
        obj.setMerchantName(merchantName);
    }
    
    public void MerchantDataOnDemand.setMerchantValid(Merchant obj, int index) {
        Boolean merchantValid = Boolean.TRUE;
        obj.setMerchantValid(merchantValid);
    }
    
    public void MerchantDataOnDemand.setObjectId(Merchant obj, int index) {
        String objectId = "objectId_" + index;
        if (objectId.length() > 24) {
            objectId = objectId.substring(0, 24);
        }
        obj.setObjectId(objectId);
    }
    
    public void MerchantDataOnDemand.setPopshopsId(Merchant obj, int index) {
        Integer popshopsId = new Integer(index);
        obj.setPopshopsId(popshopsId);
    }
    
    public void MerchantDataOnDemand.setReturnPolicy(Merchant obj, int index) {
        String returnPolicy = "returnPolicy_" + index;
        if (returnPolicy.length() > 1024) {
            returnPolicy = returnPolicy.substring(0, 1024);
        }
        obj.setReturnPolicy(returnPolicy);
    }
    
    public void MerchantDataOnDemand.setUrl(Merchant obj, int index) {
        String url = "url_" + index;
        if (url.length() > 255) {
            url = url.substring(0, 255);
        }
        obj.setUrl(url);
    }
    
    public void MerchantDataOnDemand.setUrlName(Merchant obj, int index) {
        String urlName = "urlName_" + index;
        if (urlName.length() > 255) {
            urlName = urlName.substring(0, 255);
        }
        obj.setUrlName(urlName);
    }
    
    public Merchant MerchantDataOnDemand.getSpecificMerchant(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Merchant obj = data.get(index);
        Long id = obj.getId();
        return Merchant.findMerchant(id);
    }
    
    public Merchant MerchantDataOnDemand.getRandomMerchant() {
        init();
        Merchant obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Merchant.findMerchant(id);
    }
    
    public boolean MerchantDataOnDemand.modifyMerchant(Merchant obj) {
        return false;
    }
    
    public void MerchantDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Merchant.findMerchantEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Merchant' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Merchant>();
        for (int i = 0; i < 10; i++) {
            Merchant obj = getNewTransientMerchant(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
