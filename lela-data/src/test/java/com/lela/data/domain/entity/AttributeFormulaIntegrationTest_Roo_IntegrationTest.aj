// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.AttributeFormula;
import com.lela.data.domain.entity.AttributeFormulaDataOnDemand;
import com.lela.data.domain.entity.AttributeFormulaIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AttributeFormulaIntegrationTest_Roo_IntegrationTest {
    
    declare @type: AttributeFormulaIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: AttributeFormulaIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: AttributeFormulaIntegrationTest: @Transactional;
    
    @Autowired
    AttributeFormulaDataOnDemand AttributeFormulaIntegrationTest.dod;
    
    @Test
    public void AttributeFormulaIntegrationTest.testCountAttributeFormulas() {
        Assert.assertNotNull("Data on demand for 'AttributeFormula' failed to initialize correctly", dod.getRandomAttributeFormula());
        long count = AttributeFormula.countAttributeFormulas();
        Assert.assertTrue("Counter for 'AttributeFormula' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void AttributeFormulaIntegrationTest.testFindAttributeFormula() {
        AttributeFormula obj = dod.getRandomAttributeFormula();
        Assert.assertNotNull("Data on demand for 'AttributeFormula' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'AttributeFormula' failed to provide an identifier", id);
        obj = AttributeFormula.findAttributeFormula(id);
        Assert.assertNotNull("Find method for 'AttributeFormula' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'AttributeFormula' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void AttributeFormulaIntegrationTest.testFindAllAttributeFormulas() {
        Assert.assertNotNull("Data on demand for 'AttributeFormula' failed to initialize correctly", dod.getRandomAttributeFormula());
        long count = AttributeFormula.countAttributeFormulas();
        Assert.assertTrue("Too expensive to perform a find all test for 'AttributeFormula', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<AttributeFormula> result = AttributeFormula.findAllAttributeFormulas();
        Assert.assertNotNull("Find all method for 'AttributeFormula' illegally returned null", result);
        Assert.assertTrue("Find all method for 'AttributeFormula' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void AttributeFormulaIntegrationTest.testFindAttributeFormulaEntries() {
        Assert.assertNotNull("Data on demand for 'AttributeFormula' failed to initialize correctly", dod.getRandomAttributeFormula());
        long count = AttributeFormula.countAttributeFormulas();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<AttributeFormula> result = AttributeFormula.findAttributeFormulaEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'AttributeFormula' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'AttributeFormula' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void AttributeFormulaIntegrationTest.testFlush() {
        AttributeFormula obj = dod.getRandomAttributeFormula();
        Assert.assertNotNull("Data on demand for 'AttributeFormula' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'AttributeFormula' failed to provide an identifier", id);
        obj = AttributeFormula.findAttributeFormula(id);
        Assert.assertNotNull("Find method for 'AttributeFormula' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyAttributeFormula(obj);
        Integer currentVersion = obj.getVersion();
        obj.flush();
        Assert.assertTrue("Version for 'AttributeFormula' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void AttributeFormulaIntegrationTest.testMergeUpdate() {
        AttributeFormula obj = dod.getRandomAttributeFormula();
        Assert.assertNotNull("Data on demand for 'AttributeFormula' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'AttributeFormula' failed to provide an identifier", id);
        obj = AttributeFormula.findAttributeFormula(id);
        boolean modified =  dod.modifyAttributeFormula(obj);
        Integer currentVersion = obj.getVersion();
        AttributeFormula merged = (AttributeFormula)obj.merge();
        obj.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'AttributeFormula' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void AttributeFormulaIntegrationTest.testRemove() {
        AttributeFormula obj = dod.getRandomAttributeFormula();
        Assert.assertNotNull("Data on demand for 'AttributeFormula' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'AttributeFormula' failed to provide an identifier", id);
        obj = AttributeFormula.findAttributeFormula(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'AttributeFormula' with identifier '" + id + "'", AttributeFormula.findAttributeFormula(id));
    }
    
}
