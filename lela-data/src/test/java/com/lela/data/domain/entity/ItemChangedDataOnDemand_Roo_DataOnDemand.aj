// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.ItemChanged;
import com.lela.data.domain.entity.ItemChangedDataOnDemand;
import com.lela.data.domain.entity.ItemDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ItemChangedDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ItemChangedDataOnDemand: @Component;
    
    private Random ItemChangedDataOnDemand.rnd = new SecureRandom();
    
    private List<ItemChanged> ItemChangedDataOnDemand.data;
    
    @Autowired
    ItemDataOnDemand ItemChangedDataOnDemand.itemDataOnDemand;
    
    public ItemChanged ItemChangedDataOnDemand.getNewTransientItemChanged(int index) {
        ItemChanged obj = new ItemChanged();
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setDirty(obj, index);
        setDirtyInDevelopment(obj, index);
        setDirtyInLatest(obj, index);
        setDirtyInQA(obj, index);
        setDirtyInSandbox(obj, index);
        setDirtyInWWW(obj, index);
        return obj;
    }
    
    public void ItemChangedDataOnDemand.setDateCreated(ItemChanged obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void ItemChangedDataOnDemand.setDateModified(ItemChanged obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void ItemChangedDataOnDemand.setDirty(ItemChanged obj, int index) {
        Boolean dirty = Boolean.TRUE;
        obj.setDirty(dirty);
    }
    
    public void ItemChangedDataOnDemand.setDirtyInDevelopment(ItemChanged obj, int index) {
        Boolean dirtyInDevelopment = Boolean.TRUE;
        obj.setDirtyInDevelopment(dirtyInDevelopment);
    }
    
    public void ItemChangedDataOnDemand.setDirtyInLatest(ItemChanged obj, int index) {
        Boolean dirtyInLatest = Boolean.TRUE;
        obj.setDirtyInLatest(dirtyInLatest);
    }
    
    public void ItemChangedDataOnDemand.setDirtyInQA(ItemChanged obj, int index) {
        Boolean dirtyInQA = Boolean.TRUE;
        obj.setDirtyInQA(dirtyInQA);
    }
    
    public void ItemChangedDataOnDemand.setDirtyInSandbox(ItemChanged obj, int index) {
        Boolean dirtyInSandbox = Boolean.TRUE;
        obj.setDirtyInSandbox(dirtyInSandbox);
    }
    
    public void ItemChangedDataOnDemand.setDirtyInWWW(ItemChanged obj, int index) {
        Boolean dirtyInWWW = Boolean.TRUE;
        obj.setDirtyInWWW(dirtyInWWW);
    }
    
    public ItemChanged ItemChangedDataOnDemand.getSpecificItemChanged(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ItemChanged obj = data.get(index);
        Long id = obj.getId();
        return ItemChanged.findItemChanged(id);
    }
    
    public ItemChanged ItemChangedDataOnDemand.getRandomItemChanged() {
        init();
        ItemChanged obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ItemChanged.findItemChanged(id);
    }
    
    public boolean ItemChangedDataOnDemand.modifyItemChanged(ItemChanged obj) {
        return false;
    }
    
    public void ItemChangedDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ItemChanged.findItemChangedEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ItemChanged' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ItemChanged>();
        for (int i = 0; i < 10; i++) {
            ItemChanged obj = getNewTransientItemChanged(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
