// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.AttributeType;
import com.lela.data.domain.entity.AttributeTypeDataOnDemand;
import com.lela.data.domain.entity.Item;
import com.lela.data.domain.entity.ItemAttributeHistory;
import com.lela.data.domain.entity.ItemAttributeHistoryDataOnDemand;
import com.lela.data.domain.entity.ItemDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ItemAttributeHistoryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ItemAttributeHistoryDataOnDemand: @Component;
    
    private Random ItemAttributeHistoryDataOnDemand.rnd = new SecureRandom();
    
    private List<ItemAttributeHistory> ItemAttributeHistoryDataOnDemand.data;
    
    @Autowired
    AttributeTypeDataOnDemand ItemAttributeHistoryDataOnDemand.attributeTypeDataOnDemand;
    
    @Autowired
    ItemDataOnDemand ItemAttributeHistoryDataOnDemand.itemDataOnDemand;
    
    public ItemAttributeHistory ItemAttributeHistoryDataOnDemand.getNewTransientItemAttributeHistory(int index) {
        ItemAttributeHistory obj = new ItemAttributeHistory();
        setAttributeSequence(obj, index);
        setAttributeType(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setItem(obj, index);
        setNewAttributeValue(obj, index);
        setOldAttributeValue(obj, index);
        return obj;
    }
    
    public void ItemAttributeHistoryDataOnDemand.setAttributeSequence(ItemAttributeHistory obj, int index) {
        Integer attributeSequence = new Integer(index);
        obj.setAttributeSequence(attributeSequence);
    }
    
    public void ItemAttributeHistoryDataOnDemand.setAttributeType(ItemAttributeHistory obj, int index) {
        AttributeType attributeType = attributeTypeDataOnDemand.getRandomAttributeType();
        obj.setAttributeType(attributeType);
    }
    
    public void ItemAttributeHistoryDataOnDemand.setDateCreated(ItemAttributeHistory obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void ItemAttributeHistoryDataOnDemand.setDateModified(ItemAttributeHistory obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void ItemAttributeHistoryDataOnDemand.setItem(ItemAttributeHistory obj, int index) {
        Item item = itemDataOnDemand.getRandomItem();
        obj.setItem(item);
    }
    
    public void ItemAttributeHistoryDataOnDemand.setNewAttributeValue(ItemAttributeHistory obj, int index) {
        String newAttributeValue = "newAttributeValue_" + index;
        if (newAttributeValue.length() > 10000) {
            newAttributeValue = newAttributeValue.substring(0, 10000);
        }
        obj.setNewAttributeValue(newAttributeValue);
    }
    
    public void ItemAttributeHistoryDataOnDemand.setOldAttributeValue(ItemAttributeHistory obj, int index) {
        String oldAttributeValue = "oldAttributeValue_" + index;
        if (oldAttributeValue.length() > 10000) {
            oldAttributeValue = oldAttributeValue.substring(0, 10000);
        }
        obj.setOldAttributeValue(oldAttributeValue);
    }
    
    public ItemAttributeHistory ItemAttributeHistoryDataOnDemand.getSpecificItemAttributeHistory(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ItemAttributeHistory obj = data.get(index);
        Long id = obj.getId();
        return ItemAttributeHistory.findItemAttributeHistory(id);
    }
    
    public ItemAttributeHistory ItemAttributeHistoryDataOnDemand.getRandomItemAttributeHistory() {
        init();
        ItemAttributeHistory obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ItemAttributeHistory.findItemAttributeHistory(id);
    }
    
    public boolean ItemAttributeHistoryDataOnDemand.modifyItemAttributeHistory(ItemAttributeHistory obj) {
        return false;
    }
    
    public void ItemAttributeHistoryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ItemAttributeHistory.findItemAttributeHistoryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ItemAttributeHistory' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ItemAttributeHistory>();
        for (int i = 0; i < 10; i++) {
            ItemAttributeHistory obj = getNewTransientItemAttributeHistory(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
