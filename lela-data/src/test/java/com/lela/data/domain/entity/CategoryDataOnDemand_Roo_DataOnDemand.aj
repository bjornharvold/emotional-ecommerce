// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.Category;
import com.lela.data.domain.entity.CategoryDataOnDemand;
import com.lela.data.domain.entity.DataSourceType;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect CategoryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CategoryDataOnDemand: @Component;
    
    private Random CategoryDataOnDemand.rnd = new SecureRandom();
    
    private List<Category> CategoryDataOnDemand.data;
    
    public Category CategoryDataOnDemand.getNewTransientCategory(int index) {
        Category obj = new Category();
        setCatalogKey(obj, index);
        setCategoryName(obj, index);
        setCategoryNavbar(obj, index);
        setCategoryObjectId(obj, index);
        setCategoryOrder(obj, index);
        setDataSourceString(obj, index);
        setDataSourceType(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setDirty(obj, index);
        setEnableBrandAveragedMotivators(obj, index);
        setEnableBrandFilter(obj, index);
        setLelaUrl(obj, index);
        setObjectId(obj, index);
        setRetentionLimitMonths(obj, index);
        setUrlname(obj, index);
        setVisible(obj, index);
        return obj;
    }
    
    public void CategoryDataOnDemand.setCatalogKey(Category obj, int index) {
        String catalogKey = "catalogKey_" + index;
        obj.setCatalogKey(catalogKey);
    }
    
    public void CategoryDataOnDemand.setCategoryName(Category obj, int index) {
        String categoryName = "categoryName_" + index;
        obj.setCategoryName(categoryName);
    }
    
    public void CategoryDataOnDemand.setCategoryNavbar(Category obj, int index) {
        Integer categoryNavbar = new Integer(index);
        obj.setCategoryNavbar(categoryNavbar);
    }
    
    public void CategoryDataOnDemand.setCategoryObjectId(Category obj, int index) {
        String categoryObjectId = "categoryObjectId_" + index;
        obj.setCategoryObjectId(categoryObjectId);
    }
    
    public void CategoryDataOnDemand.setCategoryOrder(Category obj, int index) {
        Integer categoryOrder = new Integer(index);
        obj.setCategoryOrder(categoryOrder);
    }
    
    public void CategoryDataOnDemand.setDataSourceString(Category obj, int index) {
        String dataSourceString = "dataSourceString_" + index;
        obj.setDataSourceString(dataSourceString);
    }
    
    public void CategoryDataOnDemand.setDataSourceType(Category obj, int index) {
        DataSourceType dataSourceType = null;
        obj.setDataSourceType(dataSourceType);
    }
    
    public void CategoryDataOnDemand.setDateCreated(Category obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void CategoryDataOnDemand.setDateModified(Category obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void CategoryDataOnDemand.setDirty(Category obj, int index) {
        Boolean dirty = Boolean.TRUE;
        obj.setDirty(dirty);
    }
    
    public void CategoryDataOnDemand.setEnableBrandAveragedMotivators(Category obj, int index) {
        Boolean enableBrandAveragedMotivators = Boolean.TRUE;
        obj.setEnableBrandAveragedMotivators(enableBrandAveragedMotivators);
    }
    
    public void CategoryDataOnDemand.setEnableBrandFilter(Category obj, int index) {
        Boolean enableBrandFilter = Boolean.TRUE;
        obj.setEnableBrandFilter(enableBrandFilter);
    }
    
    public void CategoryDataOnDemand.setLelaUrl(Category obj, int index) {
        String lelaUrl = "lelaUrl_" + index;
        obj.setLelaUrl(lelaUrl);
    }
    
    public void CategoryDataOnDemand.setObjectId(Category obj, int index) {
        String objectId = "objectId_" + index;
        obj.setObjectId(objectId);
    }
    
    public void CategoryDataOnDemand.setRetentionLimitMonths(Category obj, int index) {
        Integer retentionLimitMonths = new Integer(index);
        obj.setRetentionLimitMonths(retentionLimitMonths);
    }
    
    public void CategoryDataOnDemand.setUrlname(Category obj, int index) {
        String urlname = "urlname_" + index;
        obj.setUrlname(urlname);
    }
    
    public void CategoryDataOnDemand.setVisible(Category obj, int index) {
        Boolean visible = Boolean.TRUE;
        obj.setVisible(visible);
    }
    
    public Category CategoryDataOnDemand.getSpecificCategory(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Category obj = data.get(index);
        Long id = obj.getId();
        return Category.findCategory(id);
    }
    
    public Category CategoryDataOnDemand.getRandomCategory() {
        init();
        Category obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Category.findCategory(id);
    }
    
    public boolean CategoryDataOnDemand.modifyCategory(Category obj) {
        return false;
    }
    
    public void CategoryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Category.findCategoryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Category' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Category>();
        for (int i = 0; i < 10; i++) {
            Category obj = getNewTransientCategory(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
