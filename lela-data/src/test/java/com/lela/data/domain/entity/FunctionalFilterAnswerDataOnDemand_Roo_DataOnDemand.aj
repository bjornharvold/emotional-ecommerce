// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.FunctionalFilterAnswer;
import com.lela.data.domain.entity.FunctionalFilterAnswerDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect FunctionalFilterAnswerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FunctionalFilterAnswerDataOnDemand: @Component;
    
    private Random FunctionalFilterAnswerDataOnDemand.rnd = new SecureRandom();
    
    private List<FunctionalFilterAnswer> FunctionalFilterAnswerDataOnDemand.data;
    
    public FunctionalFilterAnswer FunctionalFilterAnswerDataOnDemand.getNewTransientFunctionalFilterAnswer(int index) {
        FunctionalFilterAnswer obj = new FunctionalFilterAnswer();
        setAnswer(obj, index);
        setAnswerKey(obj, index);
        setAnswerOrder(obj, index);
        setAnswerValue(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setDefaultt(obj, index);
        setFunctionalFilter(obj, index);
        setFunctionalFilterAnswerLabel(obj, index);
        return obj;
    }
    
    public void FunctionalFilterAnswerDataOnDemand.setAnswer(FunctionalFilterAnswer obj, int index) {
        Integer answer = new Integer(index);
        obj.setAnswer(answer);
    }
    
    public void FunctionalFilterAnswerDataOnDemand.setAnswerKey(FunctionalFilterAnswer obj, int index) {
        String answerKey = "answerKey_" + index;
        obj.setAnswerKey(answerKey);
    }
    
    public void FunctionalFilterAnswerDataOnDemand.setAnswerOrder(FunctionalFilterAnswer obj, int index) {
        Integer answerOrder = new Integer(index);
        obj.setAnswerOrder(answerOrder);
    }
    
    public void FunctionalFilterAnswerDataOnDemand.setAnswerValue(FunctionalFilterAnswer obj, int index) {
        String answerValue = "answerValue_" + index;
        obj.setAnswerValue(answerValue);
    }
    
    public void FunctionalFilterAnswerDataOnDemand.setDateCreated(FunctionalFilterAnswer obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void FunctionalFilterAnswerDataOnDemand.setDateModified(FunctionalFilterAnswer obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void FunctionalFilterAnswerDataOnDemand.setDefaultt(FunctionalFilterAnswer obj, int index) {
        Boolean defaultt = Boolean.TRUE;
        obj.setDefaultt(defaultt);
    }
    
    public void FunctionalFilterAnswerDataOnDemand.setFunctionalFilterAnswerLabel(FunctionalFilterAnswer obj, int index) {
        String functionalFilterAnswerLabel = "functionalFilterAnswerLabel_" + index;
        obj.setFunctionalFilterAnswerLabel(functionalFilterAnswerLabel);
    }
    
    public FunctionalFilterAnswer FunctionalFilterAnswerDataOnDemand.getSpecificFunctionalFilterAnswer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        FunctionalFilterAnswer obj = data.get(index);
        Long id = obj.getId();
        return FunctionalFilterAnswer.findFunctionalFilterAnswer(id);
    }
    
    public FunctionalFilterAnswer FunctionalFilterAnswerDataOnDemand.getRandomFunctionalFilterAnswer() {
        init();
        FunctionalFilterAnswer obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return FunctionalFilterAnswer.findFunctionalFilterAnswer(id);
    }
    
    public boolean FunctionalFilterAnswerDataOnDemand.modifyFunctionalFilterAnswer(FunctionalFilterAnswer obj) {
        return false;
    }
    
    public void FunctionalFilterAnswerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = FunctionalFilterAnswer.findFunctionalFilterAnswerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'FunctionalFilterAnswer' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<FunctionalFilterAnswer>();
        for (int i = 0; i < 10; i++) {
            FunctionalFilterAnswer obj = getNewTransientFunctionalFilterAnswer(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
