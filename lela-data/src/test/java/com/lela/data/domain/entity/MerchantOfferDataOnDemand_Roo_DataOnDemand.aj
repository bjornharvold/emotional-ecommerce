// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.MerchantOffer;
import com.lela.data.domain.entity.MerchantOfferDataOnDemand;
import com.lela.data.domain.entity.ReviewStatus;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect MerchantOfferDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MerchantOfferDataOnDemand: @Component;
    
    private Random MerchantOfferDataOnDemand.rnd = new SecureRandom();
    
    private List<MerchantOffer> MerchantOfferDataOnDemand.data;
    
    public void MerchantOfferDataOnDemand.setAvailable(MerchantOffer obj, int index) {
        Boolean available = Boolean.TRUE;
        obj.setAvailable(available);
    }
    
    public void MerchantOfferDataOnDemand.setColor(MerchantOffer obj, int index) {
        String color = "color_" + index;
        obj.setColor(color);
    }
    
    public void MerchantOfferDataOnDemand.setDateCreated(MerchantOffer obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void MerchantOfferDataOnDemand.setDateModified(MerchantOffer obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void MerchantOfferDataOnDemand.setDirty(MerchantOffer obj, int index) {
        Boolean dirty = Boolean.TRUE;
        obj.setDirty(dirty);
    }
    
    public void MerchantOfferDataOnDemand.setDoNotUse(MerchantOffer obj, int index) {
        Boolean doNotUse = Boolean.TRUE;
        obj.setDoNotUse(doNotUse);
    }
    
    public void MerchantOfferDataOnDemand.setLoadDateId(MerchantOffer obj, int index) {
        Integer loadDateId = new Integer(index);
        obj.setLoadDateId(loadDateId);
    }
    
    public void MerchantOfferDataOnDemand.setMerchantName(MerchantOffer obj, int index) {
        String merchantName = "merchantName_" + index;
        obj.setMerchantName(merchantName);
    }
    
    public void MerchantOfferDataOnDemand.setModelNumber(MerchantOffer obj, int index) {
        String modelNumber = "modelNumber_" + index;
        obj.setModelNumber(modelNumber);
    }
    
    public void MerchantOfferDataOnDemand.setOfferDate(MerchantOffer obj, int index) {
        String offerDate = "offerDate_" + index;
        obj.setOfferDate(offerDate);
    }
    
    public void MerchantOfferDataOnDemand.setOfferItemName(MerchantOffer obj, int index) {
        String offerItemName = "offerItemName_" + index;
        obj.setOfferItemName(offerItemName);
    }
    
    public void MerchantOfferDataOnDemand.setOfferPrice(MerchantOffer obj, int index) {
        String offerPrice = "offerPrice_" + index;
        if (offerPrice.length() > 18) {
            offerPrice = offerPrice.substring(0, 18);
        }
        obj.setOfferPrice(offerPrice);
    }
    
    public void MerchantOfferDataOnDemand.setOfferSalePrice(MerchantOffer obj, int index) {
        String offerSalePrice = "offerSalePrice_" + index;
        if (offerSalePrice.length() > 18) {
            offerSalePrice = offerSalePrice.substring(0, 18);
        }
        obj.setOfferSalePrice(offerSalePrice);
    }
    
    public void MerchantOfferDataOnDemand.setOfferUrl(MerchantOffer obj, int index) {
        String offerUrl = "offerUrl_" + index;
        obj.setOfferUrl(offerUrl);
    }
    
    public void MerchantOfferDataOnDemand.setReviewStatus(MerchantOffer obj, int index) {
        ReviewStatus reviewStatus = null;
        obj.setReviewStatus(reviewStatus);
    }
    
    public void MerchantOfferDataOnDemand.setSourceKey(MerchantOffer obj, int index) {
        String sourceKey = "sourceKey_" + index;
        obj.setSourceKey(sourceKey);
    }
    
    public void MerchantOfferDataOnDemand.setUpc(MerchantOffer obj, int index) {
        String upc = "upc_" + index;
        obj.setUpc(upc);
    }
    
    public void MerchantOfferDataOnDemand.setUseThisOffer(MerchantOffer obj, int index) {
        Boolean useThisOffer = Boolean.TRUE;
        obj.setUseThisOffer(useThisOffer);
    }
    
    public MerchantOffer MerchantOfferDataOnDemand.getSpecificMerchantOffer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        MerchantOffer obj = data.get(index);
        Long id = obj.getId();
        return MerchantOffer.findMerchantOffer(id);
    }
    
    public MerchantOffer MerchantOfferDataOnDemand.getRandomMerchantOffer() {
        init();
        MerchantOffer obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return MerchantOffer.findMerchantOffer(id);
    }
    
    public boolean MerchantOfferDataOnDemand.modifyMerchantOffer(MerchantOffer obj) {
        return false;
    }
    
    public void MerchantOfferDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = MerchantOffer.findMerchantOfferEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'MerchantOffer' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<MerchantOffer>();
        for (int i = 0; i < 10; i++) {
            MerchantOffer obj = getNewTransientMerchantOffer(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
