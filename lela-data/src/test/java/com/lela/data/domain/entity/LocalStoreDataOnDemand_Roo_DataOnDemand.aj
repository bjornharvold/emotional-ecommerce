// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.LocalStore;
import com.lela.data.domain.entity.LocalStoreDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect LocalStoreDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LocalStoreDataOnDemand: @Component;
    
    private Random LocalStoreDataOnDemand.rnd = new SecureRandom();
    
    private List<LocalStore> LocalStoreDataOnDemand.data;
    
    public LocalStore LocalStoreDataOnDemand.getNewTransientLocalStore(int index) {
        LocalStore obj = new LocalStore();
        setAddress(obj, index);
        setCity(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setDirty(obj, index);
        setLatitude(obj, index);
        setLelaLocalCode(obj, index);
        setLongitude(obj, index);
        setMerchantId(obj, index);
        setMerchantName(obj, index);
        setObjectId(obj, index);
        setPhoneNumber(obj, index);
        setState(obj, index);
        setStoreName(obj, index);
        setStoreNumber(obj, index);
        setZipCode(obj, index);
        return obj;
    }
    
    public void LocalStoreDataOnDemand.setAddress(LocalStore obj, int index) {
        String address = "address_" + index;
        if (address.length() > 100) {
            address = address.substring(0, 100);
        }
        obj.setAddress(address);
    }
    
    public void LocalStoreDataOnDemand.setCity(LocalStore obj, int index) {
        String city = "city_" + index;
        if (city.length() > 50) {
            city = city.substring(0, 50);
        }
        obj.setCity(city);
    }
    
    public void LocalStoreDataOnDemand.setDateCreated(LocalStore obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void LocalStoreDataOnDemand.setDateModified(LocalStore obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void LocalStoreDataOnDemand.setDirty(LocalStore obj, int index) {
        Boolean dirty = Boolean.TRUE;
        obj.setDirty(dirty);
    }
    
    public void LocalStoreDataOnDemand.setLatitude(LocalStore obj, int index) {
        String latitude = "latitude_" + index;
        if (latitude.length() > 200) {
            latitude = latitude.substring(0, 200);
        }
        obj.setLatitude(latitude);
    }
    
    public void LocalStoreDataOnDemand.setLelaLocalCode(LocalStore obj, int index) {
        String lelaLocalCode = "lelaLocalCode_" + index;
        if (lelaLocalCode.length() > 50) {
            lelaLocalCode = lelaLocalCode.substring(0, 50);
        }
        obj.setLelaLocalCode(lelaLocalCode);
    }
    
    public void LocalStoreDataOnDemand.setLongitude(LocalStore obj, int index) {
        String longitude = "longitude_" + index;
        if (longitude.length() > 200) {
            longitude = longitude.substring(0, 200);
        }
        obj.setLongitude(longitude);
    }
    
    public void LocalStoreDataOnDemand.setMerchantId(LocalStore obj, int index) {
        Integer merchantId = new Integer(index);
        obj.setMerchantId(merchantId);
    }
    
    public void LocalStoreDataOnDemand.setMerchantName(LocalStore obj, int index) {
        String merchantName = "merchantName_" + index;
        if (merchantName.length() > 50) {
            merchantName = merchantName.substring(0, 50);
        }
        obj.setMerchantName(merchantName);
    }
    
    public void LocalStoreDataOnDemand.setObjectId(LocalStore obj, int index) {
        String objectId = "objectId_" + index;
        if (objectId.length() > 24) {
            objectId = objectId.substring(0, 24);
        }
        obj.setObjectId(objectId);
    }
    
    public void LocalStoreDataOnDemand.setPhoneNumber(LocalStore obj, int index) {
        String phoneNumber = "phoneNumber_" + index;
        if (phoneNumber.length() > 25) {
            phoneNumber = phoneNumber.substring(0, 25);
        }
        obj.setPhoneNumber(phoneNumber);
    }
    
    public void LocalStoreDataOnDemand.setState(LocalStore obj, int index) {
        String state = "state_" + index;
        if (state.length() > 15) {
            state = state.substring(0, 15);
        }
        obj.setState(state);
    }
    
    public void LocalStoreDataOnDemand.setStoreName(LocalStore obj, int index) {
        String storeName = "storeName_" + index;
        if (storeName.length() > 100) {
            storeName = storeName.substring(0, 100);
        }
        obj.setStoreName(storeName);
    }
    
    public void LocalStoreDataOnDemand.setStoreNumber(LocalStore obj, int index) {
        Integer storeNumber = new Integer(index);
        obj.setStoreNumber(storeNumber);
    }
    
    public void LocalStoreDataOnDemand.setZipCode(LocalStore obj, int index) {
        String zipCode = "zipCode_" + index;
        if (zipCode.length() > 10) {
            zipCode = zipCode.substring(0, 10);
        }
        obj.setZipCode(zipCode);
    }
    
    public LocalStore LocalStoreDataOnDemand.getSpecificLocalStore(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        LocalStore obj = data.get(index);
        Long id = obj.getId();
        return LocalStore.findLocalStore(id);
    }
    
    public LocalStore LocalStoreDataOnDemand.getRandomLocalStore() {
        init();
        LocalStore obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return LocalStore.findLocalStore(id);
    }
    
    public boolean LocalStoreDataOnDemand.modifyLocalStore(LocalStore obj) {
        return false;
    }
    
    public void LocalStoreDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = LocalStore.findLocalStoreEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'LocalStore' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<LocalStore>();
        for (int i = 0; i < 10; i++) {
            LocalStore obj = getNewTransientLocalStore(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
