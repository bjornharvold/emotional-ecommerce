// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.Answer;
import com.lela.data.domain.entity.AnswerDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect AnswerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AnswerDataOnDemand: @Component;
    
    private Random AnswerDataOnDemand.rnd = new SecureRandom();
    
    private List<Answer> AnswerDataOnDemand.data;
    
    public Answer AnswerDataOnDemand.getNewTransientAnswer(int index) {
        Answer obj = new Answer();
        setA(obj, index);
        setAnswer(obj, index);
        setAnswerKey(obj, index);
        setB(obj, index);
        setC(obj, index);
        setD(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setE(obj, index);
        setF(obj, index);
        setG(obj, index);
        setH(obj, index);
        setI(obj, index);
        setImage(obj, index);
        setJ(obj, index);
        setK(obj, index);
        setL(obj, index);
        setQ(obj, index);
        setQuestion(obj, index);
        return obj;
    }
    
    public void AnswerDataOnDemand.setA(Answer obj, int index) {
        Integer a = new Integer(index);
        obj.setA(a);
    }
    
    public void AnswerDataOnDemand.setAnswer(Answer obj, int index) {
        String answer = "answer_" + index;
        obj.setAnswer(answer);
    }
    
    public void AnswerDataOnDemand.setAnswerKey(Answer obj, int index) {
        Integer answerKey = new Integer(index);
        obj.setAnswerKey(answerKey);
    }
    
    public void AnswerDataOnDemand.setB(Answer obj, int index) {
        Integer b = new Integer(index);
        obj.setB(b);
    }
    
    public void AnswerDataOnDemand.setC(Answer obj, int index) {
        Integer c = new Integer(index);
        obj.setC(c);
    }
    
    public void AnswerDataOnDemand.setD(Answer obj, int index) {
        Integer d = new Integer(index);
        obj.setD(d);
    }
    
    public void AnswerDataOnDemand.setDateCreated(Answer obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void AnswerDataOnDemand.setDateModified(Answer obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void AnswerDataOnDemand.setE(Answer obj, int index) {
        Integer e = new Integer(index);
        obj.setE(e);
    }
    
    public void AnswerDataOnDemand.setF(Answer obj, int index) {
        Integer f = new Integer(index);
        obj.setF(f);
    }
    
    public void AnswerDataOnDemand.setG(Answer obj, int index) {
        Integer g = new Integer(index);
        obj.setG(g);
    }
    
    public void AnswerDataOnDemand.setH(Answer obj, int index) {
        Integer h = new Integer(index);
        obj.setH(h);
    }
    
    public void AnswerDataOnDemand.setI(Answer obj, int index) {
        Integer i = new Integer(index);
        obj.setI(i);
    }
    
    public void AnswerDataOnDemand.setImage(Answer obj, int index) {
        String image = "image_" + index;
        obj.setImage(image);
    }
    
    public void AnswerDataOnDemand.setJ(Answer obj, int index) {
        Integer j = new Integer(index);
        obj.setJ(j);
    }
    
    public void AnswerDataOnDemand.setK(Answer obj, int index) {
        Integer k = new Integer(index);
        obj.setK(k);
    }
    
    public void AnswerDataOnDemand.setL(Answer obj, int index) {
        Integer l = new Integer(index);
        obj.setL(l);
    }
    
    public void AnswerDataOnDemand.setQ(Answer obj, int index) {
        Integer q = new Integer(index);
        obj.setQ(q);
    }
    
    public Answer AnswerDataOnDemand.getSpecificAnswer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Answer obj = data.get(index);
        Long id = obj.getId();
        return Answer.findAnswer(id);
    }
    
    public Answer AnswerDataOnDemand.getRandomAnswer() {
        init();
        Answer obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Answer.findAnswer(id);
    }
    
    public boolean AnswerDataOnDemand.modifyAnswer(Answer obj) {
        return false;
    }
    
    public void AnswerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Answer.findAnswerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Answer' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Answer>();
        for (int i = 0; i < 10; i++) {
            Answer obj = getNewTransientAnswer(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
