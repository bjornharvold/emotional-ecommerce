// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.ImageSource;
import com.lela.data.domain.entity.ProductImage;
import com.lela.data.domain.entity.ProductImageDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ProductImageDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductImageDataOnDemand: @Component;
    
    private Random ProductImageDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductImage> ProductImageDataOnDemand.data;
    
    public ProductImage ProductImageDataOnDemand.getNewTransientProductImage(int index) {
        ProductImage obj = new ProductImage();
        setBValue(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setDoNotUse(obj, index);
        setGValue(obj, index);
        setHexValue(obj, index);
        setImageAngle(obj, index);
        setImageDate(obj, index);
        setImageHeight(obj, index);
        setImageSource(obj, index);
        setImageType(obj, index);
        setImageURLLarge(obj, index);
        setImageURLMedium(obj, index);
        setImageURLScaled(obj, index);
        setImageURLSmall(obj, index);
        setImageUrl(obj, index);
        setImageWidth(obj, index);
        setPreferred(obj, index);
        setRValue(obj, index);
        setResizedUrl(obj, index);
        setResolution(obj, index);
        setSourceKey(obj, index);
        setUploadReason(obj, index);
        return obj;
    }
    
    public void ProductImageDataOnDemand.setBValue(ProductImage obj, int index) {
        Integer bValue = new Integer(index);
        obj.setBValue(bValue);
    }
    
    public void ProductImageDataOnDemand.setDateCreated(ProductImage obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void ProductImageDataOnDemand.setDateModified(ProductImage obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void ProductImageDataOnDemand.setDoNotUse(ProductImage obj, int index) {
        Boolean doNotUse = Boolean.TRUE;
        obj.setDoNotUse(doNotUse);
    }
    
    public void ProductImageDataOnDemand.setGValue(ProductImage obj, int index) {
        Integer gValue = new Integer(index);
        obj.setGValue(gValue);
    }
    
    public void ProductImageDataOnDemand.setHexValue(ProductImage obj, int index) {
        String hexValue = "hexValue_" + index;
        obj.setHexValue(hexValue);
    }
    
    public void ProductImageDataOnDemand.setImageAngle(ProductImage obj, int index) {
        String imageAngle = "imageAngle_" + index;
        obj.setImageAngle(imageAngle);
    }
    
    public void ProductImageDataOnDemand.setImageDate(ProductImage obj, int index) {
        String imageDate = "imageDate_" + index;
        obj.setImageDate(imageDate);
    }
    
    public void ProductImageDataOnDemand.setImageHeight(ProductImage obj, int index) {
        Integer imageHeight = new Integer(index);
        obj.setImageHeight(imageHeight);
    }
    
    public void ProductImageDataOnDemand.setImageSource(ProductImage obj, int index) {
        ImageSource imageSource = null;
        obj.setImageSource(imageSource);
    }
    
    public void ProductImageDataOnDemand.setImageType(ProductImage obj, int index) {
        String imageType = "imageType_" + index;
        obj.setImageType(imageType);
    }
    
    public void ProductImageDataOnDemand.setImageURLLarge(ProductImage obj, int index) {
        String imageURLLarge = "imageURLLarge_" + index;
        obj.setImageURLLarge(imageURLLarge);
    }
    
    public void ProductImageDataOnDemand.setImageURLMedium(ProductImage obj, int index) {
        String imageURLMedium = "imageURLMedium_" + index;
        obj.setImageURLMedium(imageURLMedium);
    }
    
    public void ProductImageDataOnDemand.setImageURLScaled(ProductImage obj, int index) {
        String imageURLScaled = "imageURLScaled_" + index;
        obj.setImageURLScaled(imageURLScaled);
    }
    
    public void ProductImageDataOnDemand.setImageURLSmall(ProductImage obj, int index) {
        String imageURLSmall = "imageURLSmall_" + index;
        obj.setImageURLSmall(imageURLSmall);
    }
    
    public void ProductImageDataOnDemand.setImageUrl(ProductImage obj, int index) {
        String imageUrl = "imageUrl_" + index;
        obj.setImageUrl(imageUrl);
    }
    
    public void ProductImageDataOnDemand.setImageWidth(ProductImage obj, int index) {
        Integer imageWidth = new Integer(index);
        obj.setImageWidth(imageWidth);
    }
    
    public void ProductImageDataOnDemand.setPreferred(ProductImage obj, int index) {
        Boolean preferred = Boolean.TRUE;
        obj.setPreferred(preferred);
    }
    
    public void ProductImageDataOnDemand.setRValue(ProductImage obj, int index) {
        Integer rValue = new Integer(index);
        obj.setRValue(rValue);
    }
    
    public void ProductImageDataOnDemand.setResizedUrl(ProductImage obj, int index) {
        String resizedUrl = "resizedUrl_" + index;
        obj.setResizedUrl(resizedUrl);
    }
    
    public void ProductImageDataOnDemand.setResolution(ProductImage obj, int index) {
        String resolution = "resolution_" + index;
        obj.setResolution(resolution);
    }
    
    public void ProductImageDataOnDemand.setSourceKey(ProductImage obj, int index) {
        String sourceKey = "sourceKey_" + index;
        obj.setSourceKey(sourceKey);
    }
    
    public void ProductImageDataOnDemand.setUploadReason(ProductImage obj, int index) {
        String uploadReason = "uploadReason_" + index;
        obj.setUploadReason(uploadReason);
    }
    
    public ProductImage ProductImageDataOnDemand.getSpecificProductImage(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductImage obj = data.get(index);
        Long id = obj.getId();
        return ProductImage.findProductImage(id);
    }
    
    public ProductImage ProductImageDataOnDemand.getRandomProductImage() {
        init();
        ProductImage obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ProductImage.findProductImage(id);
    }
    
    public boolean ProductImageDataOnDemand.modifyProductImage(ProductImage obj) {
        return false;
    }
    
    public void ProductImageDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProductImage.findProductImageEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductImage' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductImage>();
        for (int i = 0; i < 10; i++) {
            ProductImage obj = getNewTransientProductImage(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
