// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.MerchantDataOnDemand;
import com.lela.data.domain.entity.MerchantDeal;
import com.lela.data.domain.entity.MerchantDealDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MerchantDealDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MerchantDealDataOnDemand: @Component;
    
    private Random MerchantDealDataOnDemand.rnd = new SecureRandom();
    
    private List<MerchantDeal> MerchantDealDataOnDemand.data;
    
    @Autowired
    MerchantDataOnDemand MerchantDealDataOnDemand.merchantDataOnDemand;
    
    public MerchantDeal MerchantDealDataOnDemand.getNewTransientMerchantDeal(int index) {
        MerchantDeal obj = new MerchantDeal();
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setDealName(obj, index);
        setDealSpecifics(obj, index);
        setEndOn(obj, index);
        setObjectId(obj, index);
        setStartOn(obj, index);
        setUrl(obj, index);
        return obj;
    }
    
    public void MerchantDealDataOnDemand.setDateCreated(MerchantDeal obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void MerchantDealDataOnDemand.setDateModified(MerchantDeal obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void MerchantDealDataOnDemand.setDealName(MerchantDeal obj, int index) {
        String dealName = "dealName_" + index;
        if (dealName.length() > 255) {
            dealName = dealName.substring(0, 255);
        }
        obj.setDealName(dealName);
    }
    
    public void MerchantDealDataOnDemand.setDealSpecifics(MerchantDeal obj, int index) {
        String dealSpecifics = "dealSpecifics_" + index;
        if (dealSpecifics.length() > 20) {
            dealSpecifics = dealSpecifics.substring(0, 20);
        }
        obj.setDealSpecifics(dealSpecifics);
    }
    
    public void MerchantDealDataOnDemand.setEndOn(MerchantDeal obj, int index) {
        String endOn = "endOn_" + index;
        if (endOn.length() > 50) {
            endOn = endOn.substring(0, 50);
        }
        obj.setEndOn(endOn);
    }
    
    public void MerchantDealDataOnDemand.setObjectId(MerchantDeal obj, int index) {
        String ObjectId = "ObjectId_" + index;
        if (ObjectId.length() > 24) {
            ObjectId = ObjectId.substring(0, 24);
        }
        obj.setObjectId(ObjectId);
    }
    
    public void MerchantDealDataOnDemand.setStartOn(MerchantDeal obj, int index) {
        String startOn = "startOn_" + index;
        if (startOn.length() > 50) {
            startOn = startOn.substring(0, 50);
        }
        obj.setStartOn(startOn);
    }
    
    public void MerchantDealDataOnDemand.setUrl(MerchantDeal obj, int index) {
        String url = "url_" + index;
        if (url.length() > 255) {
            url = url.substring(0, 255);
        }
        obj.setUrl(url);
    }
    
    public MerchantDeal MerchantDealDataOnDemand.getSpecificMerchantDeal(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        MerchantDeal obj = data.get(index);
        Long id = obj.getId();
        return MerchantDeal.findMerchantDeal(id);
    }
    
    public MerchantDeal MerchantDealDataOnDemand.getRandomMerchantDeal() {
        init();
        MerchantDeal obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return MerchantDeal.findMerchantDeal(id);
    }
    
    public boolean MerchantDealDataOnDemand.modifyMerchantDeal(MerchantDeal obj) {
        return false;
    }
    
    public void MerchantDealDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = MerchantDeal.findMerchantDealEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'MerchantDeal' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<MerchantDeal>();
        for (int i = 0; i < 10; i++) {
            MerchantDeal obj = getNewTransientMerchantDeal(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
