// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.dbview.ViewService;
import com.lela.data.domain.entity.Item;
import com.lela.data.domain.entity.ItemDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ItemDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ItemDataOnDemand: @Component;
    
    private Random ItemDataOnDemand.rnd = new SecureRandom();
    
    private List<Item> ItemDataOnDemand.data;
    
    public Item ItemDataOnDemand.getNewTransientItem(int index) {
        Item obj = new Item();
        setBlockFeedUpdates(obj, index);
        setBrand(obj, index);
        setCategory(obj, index);
        setConditionType(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setDesignStyle(obj, index);
        setDoNotUse(obj, index);
        setItemId(obj, index);
        setItemStatus(obj, index);
        setItemType(obj, index);
        setLastUpdateSystem(obj, index);
        setLastUpdateUser(obj, index);
        setLelaUrl(obj, index);
        setListPrice(obj, index);
        setListPriceRange(obj, index);
        setModelNumber(obj, index);
        setModelUrl(obj, index);
        setObjectId(obj, index);
        setPriority(obj, index);
        setProductModelName(obj, index);
        setProductOverview(obj, index);
        setResearchComplete(obj, index);
        setResearcherInitials(obj, index);
        setResearcherNotes(obj, index);
        setReviewStatus(obj, index);
        setSalePrice(obj, index);
        setSiteStatus(obj, index);
        setUrlName(obj, index);
        setValidated(obj, index);
        setViewService(obj, index);
        return obj;
    }
    
    public void ItemDataOnDemand.setBlockFeedUpdates(Item obj, int index) {
        Boolean blockFeedUpdates = Boolean.TRUE;
        obj.setBlockFeedUpdates(blockFeedUpdates);
    }
    
    public void ItemDataOnDemand.setDateCreated(Item obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void ItemDataOnDemand.setDateModified(Item obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void ItemDataOnDemand.setDesignStyle(Item obj, int index) {
        String designStyle = "designStyle_" + index;
        obj.setDesignStyle(designStyle);
    }
    
    public void ItemDataOnDemand.setDoNotUse(Item obj, int index) {
        Boolean doNotUse = Boolean.TRUE;
        obj.setDoNotUse(doNotUse);
    }
    
    public void ItemDataOnDemand.setItemId(Item obj, int index) {
        Integer itemId = new Integer(index);
        obj.setItemId(itemId);
    }
    
    public void ItemDataOnDemand.setItemType(Item obj, int index) {
        String itemType = "itemType_" + index;
        obj.setItemType(itemType);
    }
    
    public void ItemDataOnDemand.setLastUpdateSystem(Item obj, int index) {
        String lastUpdateSystem = "lastUpdateSystem_" + index;
        obj.setLastUpdateSystem(lastUpdateSystem);
    }
    
    public void ItemDataOnDemand.setLastUpdateUser(Item obj, int index) {
        String lastUpdateUser = "lastUpdateUser_" + index;
        obj.setLastUpdateUser(lastUpdateUser);
    }
    
    public void ItemDataOnDemand.setLelaUrl(Item obj, int index) {
        String lelaUrl = "lelaUrl_" + index;
        obj.setLelaUrl(lelaUrl);
    }
    
    public void ItemDataOnDemand.setListPrice(Item obj, int index) {
        String listPrice = "listPrice_" + index;
        obj.setListPrice(listPrice);
    }
    
    public void ItemDataOnDemand.setListPriceRange(Item obj, int index) {
        String listPriceRange = "listPriceRange_" + index;
        obj.setListPriceRange(listPriceRange);
    }
    
    public void ItemDataOnDemand.setModelNumber(Item obj, int index) {
        String modelNumber = "modelNumber_" + index;
        obj.setModelNumber(modelNumber);
    }
    
    public void ItemDataOnDemand.setModelUrl(Item obj, int index) {
        String modelUrl = "modelUrl_" + index;
        obj.setModelUrl(modelUrl);
    }
    
    public void ItemDataOnDemand.setObjectId(Item obj, int index) {
        String objectId = "objectId_" + index;
        obj.setObjectId(objectId);
    }
    
    public void ItemDataOnDemand.setPriority(Item obj, int index) {
        String priority = "priority_" + index;
        obj.setPriority(priority);
    }
    
    public void ItemDataOnDemand.setProductModelName(Item obj, int index) {
        String productModelName = "productModelName_" + index;
        obj.setProductModelName(productModelName);
    }
    
    public void ItemDataOnDemand.setProductOverview(Item obj, int index) {
        String productOverview = "productOverview_" + index;
        obj.setProductOverview(productOverview);
    }
    
    public void ItemDataOnDemand.setResearchComplete(Item obj, int index) {
        Boolean researchComplete = Boolean.TRUE;
        obj.setResearchComplete(researchComplete);
    }
    
    public void ItemDataOnDemand.setResearcherInitials(Item obj, int index) {
        String researcherInitials = "researcherInitials_" + index;
        obj.setResearcherInitials(researcherInitials);
    }
    
    public void ItemDataOnDemand.setResearcherNotes(Item obj, int index) {
        String researcherNotes = "researcherNotes_" + index;
        obj.setResearcherNotes(researcherNotes);
    }
    
    public void ItemDataOnDemand.setSalePrice(Item obj, int index) {
        String salePrice = "salePrice_" + index;
        obj.setSalePrice(salePrice);
    }
    
    public void ItemDataOnDemand.setUrlName(Item obj, int index) {
        String urlName = "urlName_" + index;
        obj.setUrlName(urlName);
    }
    
    public void ItemDataOnDemand.setValidated(Item obj, int index) {
        String validated = "validated_" + index;
        obj.setValidated(validated);
    }
    
    public void ItemDataOnDemand.setViewService(Item obj, int index) {
        ViewService viewService = null;
        obj.setViewService(viewService);
    }
    
    public Item ItemDataOnDemand.getSpecificItem(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Item obj = data.get(index);
        Long id = obj.getId();
        return Item.findItem(id);
    }
    
    public Item ItemDataOnDemand.getRandomItem() {
        init();
        Item obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Item.findItem(id);
    }
    
    public boolean ItemDataOnDemand.modifyItem(Item obj) {
        return false;
    }
    
    public void ItemDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Item.findItemEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Item' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Item>();
        for (int i = 0; i < 10; i++) {
            Item obj = getNewTransientItem(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
