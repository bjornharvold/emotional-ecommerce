// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.AttributeTypeMotivator;
import com.lela.data.domain.entity.AttributeTypeMotivatorDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect AttributeTypeMotivatorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AttributeTypeMotivatorDataOnDemand: @Component;
    
    private Random AttributeTypeMotivatorDataOnDemand.rnd = new SecureRandom();
    
    private List<AttributeTypeMotivator> AttributeTypeMotivatorDataOnDemand.data;
    
    public AttributeTypeMotivator AttributeTypeMotivatorDataOnDemand.getNewTransientAttributeTypeMotivator(int index) {
        AttributeTypeMotivator obj = new AttributeTypeMotivator();
        setAttributeType(obj, index);
        setCategory(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setEddDataType(obj, index);
        setMotivator(obj, index);
        setRequired(obj, index);
        return obj;
    }
    
    public void AttributeTypeMotivatorDataOnDemand.setDateCreated(AttributeTypeMotivator obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void AttributeTypeMotivatorDataOnDemand.setDateModified(AttributeTypeMotivator obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void AttributeTypeMotivatorDataOnDemand.setEddDataType(AttributeTypeMotivator obj, int index) {
        String eddDataType = "eddDataType_" + index;
        obj.setEddDataType(eddDataType);
    }
    
    public void AttributeTypeMotivatorDataOnDemand.setMotivator(AttributeTypeMotivator obj, int index) {
        Integer motivator = new Integer(index);
        obj.setMotivator(motivator);
    }
    
    public void AttributeTypeMotivatorDataOnDemand.setRequired(AttributeTypeMotivator obj, int index) {
        Boolean required = Boolean.TRUE;
        obj.setRequired(required);
    }
    
    public AttributeTypeMotivator AttributeTypeMotivatorDataOnDemand.getSpecificAttributeTypeMotivator(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AttributeTypeMotivator obj = data.get(index);
        Long id = obj.getId();
        return AttributeTypeMotivator.findAttributeTypeMotivator(id);
    }
    
    public AttributeTypeMotivator AttributeTypeMotivatorDataOnDemand.getRandomAttributeTypeMotivator() {
        init();
        AttributeTypeMotivator obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return AttributeTypeMotivator.findAttributeTypeMotivator(id);
    }
    
    public boolean AttributeTypeMotivatorDataOnDemand.modifyAttributeTypeMotivator(AttributeTypeMotivator obj) {
        return false;
    }
    
    public void AttributeTypeMotivatorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = AttributeTypeMotivator.findAttributeTypeMotivatorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AttributeTypeMotivator' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AttributeTypeMotivator>();
        for (int i = 0; i < 10; i++) {
            AttributeTypeMotivator obj = getNewTransientAttributeTypeMotivator(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
