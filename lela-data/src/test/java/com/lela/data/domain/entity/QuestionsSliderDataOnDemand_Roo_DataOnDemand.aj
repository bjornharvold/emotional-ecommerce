// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.QuestionsSlider;
import com.lela.data.domain.entity.QuestionsSliderDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect QuestionsSliderDataOnDemand_Roo_DataOnDemand {
    
    declare @type: QuestionsSliderDataOnDemand: @Component;
    
    private Random QuestionsSliderDataOnDemand.rnd = new SecureRandom();
    
    private List<QuestionsSlider> QuestionsSliderDataOnDemand.data;
    
    public QuestionsSlider QuestionsSliderDataOnDemand.getNewTransientQuestionsSlider(int index) {
        QuestionsSlider obj = new QuestionsSlider();
        setActive(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setGroupName(obj, index);
        setInstructions(obj, index);
        setLeftSide(obj, index);
        setQuestionSerial(obj, index);
        setRightSide(obj, index);
        setScale(obj, index);
        return obj;
    }
    
    public void QuestionsSliderDataOnDemand.setActive(QuestionsSlider obj, int index) {
        String active = "active_" + index;
        if (active.length() > 50) {
            active = active.substring(0, 50);
        }
        obj.setActive(active);
    }
    
    public void QuestionsSliderDataOnDemand.setDateCreated(QuestionsSlider obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void QuestionsSliderDataOnDemand.setDateModified(QuestionsSlider obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void QuestionsSliderDataOnDemand.setGroupName(QuestionsSlider obj, int index) {
        Integer groupName = new Integer(index);
        obj.setGroupName(groupName);
    }
    
    public void QuestionsSliderDataOnDemand.setInstructions(QuestionsSlider obj, int index) {
        String instructions = "instructions_" + index;
        if (instructions.length() > 67) {
            instructions = instructions.substring(0, 67);
        }
        obj.setInstructions(instructions);
    }
    
    public void QuestionsSliderDataOnDemand.setLeftSide(QuestionsSlider obj, int index) {
        String leftSide = "leftSide_" + index;
        if (leftSide.length() > 73) {
            leftSide = leftSide.substring(0, 73);
        }
        obj.setLeftSide(leftSide);
    }
    
    public void QuestionsSliderDataOnDemand.setQuestionSerial(QuestionsSlider obj, int index) {
        Long questionSerial = new Integer(index).longValue();
        obj.setQuestionSerial(questionSerial);
    }
    
    public void QuestionsSliderDataOnDemand.setRightSide(QuestionsSlider obj, int index) {
        String rightSide = "rightSide_" + index;
        if (rightSide.length() > 72) {
            rightSide = rightSide.substring(0, 72);
        }
        obj.setRightSide(rightSide);
    }
    
    public void QuestionsSliderDataOnDemand.setScale(QuestionsSlider obj, int index) {
        String scale = "scale_" + index;
        if (scale.length() > 91) {
            scale = scale.substring(0, 91);
        }
        obj.setScale(scale);
    }
    
    public QuestionsSlider QuestionsSliderDataOnDemand.getSpecificQuestionsSlider(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        QuestionsSlider obj = data.get(index);
        Long id = obj.getId();
        return QuestionsSlider.findQuestionsSlider(id);
    }
    
    public QuestionsSlider QuestionsSliderDataOnDemand.getRandomQuestionsSlider() {
        init();
        QuestionsSlider obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return QuestionsSlider.findQuestionsSlider(id);
    }
    
    public boolean QuestionsSliderDataOnDemand.modifyQuestionsSlider(QuestionsSlider obj) {
        return false;
    }
    
    public void QuestionsSliderDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = QuestionsSlider.findQuestionsSliderEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'QuestionsSlider' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<QuestionsSlider>();
        for (int i = 0; i < 10; i++) {
            QuestionsSlider obj = getNewTransientQuestionsSlider(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
