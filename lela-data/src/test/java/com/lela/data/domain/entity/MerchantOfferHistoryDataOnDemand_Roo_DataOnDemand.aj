// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.Item;
import com.lela.data.domain.entity.Merchant;
import com.lela.data.domain.entity.MerchantOfferHistory;
import com.lela.data.domain.entity.MerchantOfferHistoryDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect MerchantOfferHistoryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MerchantOfferHistoryDataOnDemand: @Component;
    
    private Random MerchantOfferHistoryDataOnDemand.rnd = new SecureRandom();
    
    private List<MerchantOfferHistory> MerchantOfferHistoryDataOnDemand.data;
    
    public MerchantOfferHistory MerchantOfferHistoryDataOnDemand.getNewTransientMerchantOfferHistory(int index) {
        MerchantOfferHistory obj = new MerchantOfferHistory();
        setAvailable(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setEndDate(obj, index);
        setItem(obj, index);
        setMerchant(obj, index);
        setOfferId(obj, index);
        setOfferItemName(obj, index);
        setOfferPrice(obj, index);
        setOfferSalePrice(obj, index);
        setSourceId(obj, index);
        setSourceKey(obj, index);
        setSourceTypeId(obj, index);
        setStartDate(obj, index);
        return obj;
    }
    
    public void MerchantOfferHistoryDataOnDemand.setAvailable(MerchantOfferHistory obj, int index) {
        Boolean available = Boolean.TRUE;
        obj.setAvailable(available);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setDateCreated(MerchantOfferHistory obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setDateModified(MerchantOfferHistory obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setEndDate(MerchantOfferHistory obj, int index) {
        Date endDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDate(endDate);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setItem(MerchantOfferHistory obj, int index) {
        Item item = null;
        obj.setItem(item);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setMerchant(MerchantOfferHistory obj, int index) {
        Merchant merchant = null;
        obj.setMerchant(merchant);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setOfferId(MerchantOfferHistory obj, int index) {
        Integer offerId = new Integer(index);
        obj.setOfferId(offerId);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setOfferItemName(MerchantOfferHistory obj, int index) {
        String offerItemName = "offerItemName_" + index;
        obj.setOfferItemName(offerItemName);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setOfferPrice(MerchantOfferHistory obj, int index) {
        String offerPrice = "offerPrice_" + index;
        obj.setOfferPrice(offerPrice);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setOfferSalePrice(MerchantOfferHistory obj, int index) {
        String offerSalePrice = "offerSalePrice_" + index;
        obj.setOfferSalePrice(offerSalePrice);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setSourceId(MerchantOfferHistory obj, int index) {
        String sourceId = "sourceId_" + index;
        obj.setSourceId(sourceId);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setSourceKey(MerchantOfferHistory obj, int index) {
        String sourceKey = "sourceKey_" + index;
        obj.setSourceKey(sourceKey);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setSourceTypeId(MerchantOfferHistory obj, int index) {
        String sourceTypeId = "sourceTypeId_" + index;
        obj.setSourceTypeId(sourceTypeId);
    }
    
    public void MerchantOfferHistoryDataOnDemand.setStartDate(MerchantOfferHistory obj, int index) {
        Date startDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDate(startDate);
    }
    
    public MerchantOfferHistory MerchantOfferHistoryDataOnDemand.getSpecificMerchantOfferHistory(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        MerchantOfferHistory obj = data.get(index);
        Long id = obj.getId();
        return MerchantOfferHistory.findMerchantOfferHistory(id);
    }
    
    public MerchantOfferHistory MerchantOfferHistoryDataOnDemand.getRandomMerchantOfferHistory() {
        init();
        MerchantOfferHistory obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return MerchantOfferHistory.findMerchantOfferHistory(id);
    }
    
    public boolean MerchantOfferHistoryDataOnDemand.modifyMerchantOfferHistory(MerchantOfferHistory obj) {
        return false;
    }
    
    public void MerchantOfferHistoryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = MerchantOfferHistory.findMerchantOfferHistoryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'MerchantOfferHistory' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<MerchantOfferHistory>();
        for (int i = 0; i < 10; i++) {
            MerchantOfferHistory obj = getNewTransientMerchantOfferHistory(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
