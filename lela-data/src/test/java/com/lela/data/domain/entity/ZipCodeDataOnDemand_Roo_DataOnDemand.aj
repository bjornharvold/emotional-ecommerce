// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.domain.entity;

import com.lela.data.domain.entity.ZipCode;
import com.lela.data.domain.entity.ZipCodeDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ZipCodeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ZipCodeDataOnDemand: @Component;
    
    private Random ZipCodeDataOnDemand.rnd = new SecureRandom();
    
    private List<ZipCode> ZipCodeDataOnDemand.data;
    
    public ZipCode ZipCodeDataOnDemand.getNewTransientZipCode(int index) {
        ZipCode obj = new ZipCode();
        setAge(obj, index);
        setAgeFemale(obj, index);
        setAgeMale(obj, index);
        setAsian(obj, index);
        setBlack(obj, index);
        setCbsa(obj, index);
        setCity(obj, index);
        setDateCreated(obj, index);
        setDateModified(obj, index);
        setDirty(obj, index);
        setDivision(obj, index);
        setFemale(obj, index);
        setHawaiian(obj, index);
        setHispanic(obj, index);
        setHousehold(obj, index);
        setIncome(obj, index);
        setIndian(obj, index);
        setLat(obj, index);
        setLng(obj, index);
        setMale(obj, index);
        setObjectId(obj, index);
        setOther(obj, index);
        setPopulation(obj, index);
        setPostalCode(obj, index);
        setRegion(obj, index);
        setStateCode(obj, index);
        setStateName(obj, index);
        setWhite(obj, index);
        return obj;
    }
    
    public void ZipCodeDataOnDemand.setAge(ZipCode obj, int index) {
        BigDecimal age = BigDecimal.valueOf(index);
        obj.setAge(age);
    }
    
    public void ZipCodeDataOnDemand.setAgeFemale(ZipCode obj, int index) {
        BigDecimal ageFemale = BigDecimal.valueOf(index);
        obj.setAgeFemale(ageFemale);
    }
    
    public void ZipCodeDataOnDemand.setAgeMale(ZipCode obj, int index) {
        BigDecimal ageMale = BigDecimal.valueOf(index);
        obj.setAgeMale(ageMale);
    }
    
    public void ZipCodeDataOnDemand.setAsian(ZipCode obj, int index) {
        Integer asian = new Integer(index);
        obj.setAsian(asian);
    }
    
    public void ZipCodeDataOnDemand.setBlack(ZipCode obj, int index) {
        Integer black = new Integer(index);
        obj.setBlack(black);
    }
    
    public void ZipCodeDataOnDemand.setCbsa(ZipCode obj, int index) {
        Integer cbsa = new Integer(index);
        obj.setCbsa(cbsa);
    }
    
    public void ZipCodeDataOnDemand.setCity(ZipCode obj, int index) {
        String city = "city_" + index;
        if (city.length() > 255) {
            city = city.substring(0, 255);
        }
        obj.setCity(city);
    }
    
    public void ZipCodeDataOnDemand.setDateCreated(ZipCode obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void ZipCodeDataOnDemand.setDateModified(ZipCode obj, int index) {
        Date dateModified = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateModified(dateModified);
    }
    
    public void ZipCodeDataOnDemand.setDirty(ZipCode obj, int index) {
        Boolean dirty = Boolean.TRUE;
        obj.setDirty(dirty);
    }
    
    public void ZipCodeDataOnDemand.setDivision(ZipCode obj, int index) {
        String division = "division_" + index;
        if (division.length() > 20) {
            division = division.substring(0, 20);
        }
        obj.setDivision(division);
    }
    
    public void ZipCodeDataOnDemand.setFemale(ZipCode obj, int index) {
        Integer female = new Integer(index);
        obj.setFemale(female);
    }
    
    public void ZipCodeDataOnDemand.setHawaiian(ZipCode obj, int index) {
        Integer hawaiian = new Integer(index);
        obj.setHawaiian(hawaiian);
    }
    
    public void ZipCodeDataOnDemand.setHispanic(ZipCode obj, int index) {
        Integer hispanic = new Integer(index);
        obj.setHispanic(hispanic);
    }
    
    public void ZipCodeDataOnDemand.setHousehold(ZipCode obj, int index) {
        BigDecimal household = BigDecimal.valueOf(index);
        obj.setHousehold(household);
    }
    
    public void ZipCodeDataOnDemand.setIncome(ZipCode obj, int index) {
        Integer income = new Integer(index);
        obj.setIncome(income);
    }
    
    public void ZipCodeDataOnDemand.setIndian(ZipCode obj, int index) {
        Integer indian = new Integer(index);
        obj.setIndian(indian);
    }
    
    public void ZipCodeDataOnDemand.setLat(ZipCode obj, int index) {
        Double lat = new Integer(index).doubleValue();
        obj.setLat(lat);
    }
    
    public void ZipCodeDataOnDemand.setLng(ZipCode obj, int index) {
        Double lng = new Integer(index).doubleValue();
        obj.setLng(lng);
    }
    
    public void ZipCodeDataOnDemand.setMale(ZipCode obj, int index) {
        Integer male = new Integer(index);
        obj.setMale(male);
    }
    
    public void ZipCodeDataOnDemand.setObjectId(ZipCode obj, int index) {
        String objectId = "objectId_" + index;
        if (objectId.length() > 24) {
            objectId = objectId.substring(0, 24);
        }
        obj.setObjectId(objectId);
    }
    
    public void ZipCodeDataOnDemand.setOther(ZipCode obj, int index) {
        Integer other = new Integer(index);
        obj.setOther(other);
    }
    
    public void ZipCodeDataOnDemand.setPopulation(ZipCode obj, int index) {
        Integer population = new Integer(index);
        obj.setPopulation(population);
    }
    
    public void ZipCodeDataOnDemand.setPostalCode(ZipCode obj, int index) {
        String postalCode = "postalCod_" + index;
        if (postalCode.length() > 11) {
            postalCode = postalCode.substring(0, 11);
        }
        obj.setPostalCode(postalCode);
    }
    
    public void ZipCodeDataOnDemand.setRegion(ZipCode obj, int index) {
        String region = "region_" + index;
        if (region.length() > 20) {
            region = region.substring(0, 20);
        }
        obj.setRegion(region);
    }
    
    public void ZipCodeDataOnDemand.setStateCode(ZipCode obj, int index) {
        String stateCode = "stat_" + index;
        if (stateCode.length() > 6) {
            stateCode = stateCode.substring(0, 6);
        }
        obj.setStateCode(stateCode);
    }
    
    public void ZipCodeDataOnDemand.setStateName(ZipCode obj, int index) {
        String stateName = "stateName_" + index;
        if (stateName.length() > 20) {
            stateName = stateName.substring(0, 20);
        }
        obj.setStateName(stateName);
    }
    
    public void ZipCodeDataOnDemand.setWhite(ZipCode obj, int index) {
        Integer white = new Integer(index);
        obj.setWhite(white);
    }
    
    public ZipCode ZipCodeDataOnDemand.getSpecificZipCode(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ZipCode obj = data.get(index);
        Long id = obj.getId();
        return ZipCode.findZipCode(id);
    }
    
    public ZipCode ZipCodeDataOnDemand.getRandomZipCode() {
        init();
        ZipCode obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ZipCode.findZipCode(id);
    }
    
    public boolean ZipCodeDataOnDemand.modifyZipCode(ZipCode obj) {
        return false;
    }
    
    public void ZipCodeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ZipCode.findZipCodeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ZipCode' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ZipCode>();
        for (int i = 0; i < 10; i++) {
            ZipCode obj = getNewTransientZipCode(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
