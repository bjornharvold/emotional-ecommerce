// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.web;

import com.lela.data.domain.entity.Affiliate;
import com.lela.data.domain.entity.Locale;
import com.lela.data.domain.entity.Navbar;
import com.lela.data.web.NavbarController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect NavbarController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String NavbarController.create(@Valid Navbar navbar, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, navbar);
            return "crud/navbars/create";
        }
        uiModel.asMap().clear();
        navbar.persist();
        return "redirect:/crud/navbars/" + encodeUrlPathSegment(navbar.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String NavbarController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Navbar());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (Locale.countLocales() == 0) {
            dependencies.add(new String[] { "locale", "crud/locales" });
        }
        if (Affiliate.countAffiliates() == 0) {
            dependencies.add(new String[] { "affiliate", "affiliates" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "crud/navbars/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String NavbarController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("navbar", Navbar.findNavbar(id));
        uiModel.addAttribute("itemId", id);
        return "crud/navbars/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String NavbarController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("navbars", Navbar.findNavbarEntries(firstResult, sizeNo));
            float nrOfPages = (float) Navbar.countNavbars() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("navbars", Navbar.findAllNavbars());
        }
        addDateTimeFormatPatterns(uiModel);
        return "crud/navbars/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String NavbarController.update(@Valid Navbar navbar, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, navbar);
            return "crud/navbars/update";
        }
        uiModel.asMap().clear();
        navbar.merge();
        return "redirect:/crud/navbars/" + encodeUrlPathSegment(navbar.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String NavbarController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Navbar.findNavbar(id));
        return "crud/navbars/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String NavbarController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Navbar navbar = Navbar.findNavbar(id);
        navbar.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/crud/navbars";
    }
    
    void NavbarController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("navbar_datecreated_date_format", "yyy-MM-dd hh:mm:ss a");
        uiModel.addAttribute("navbar_datemodified_date_format", "yyy-MM-dd hh:mm:ss a");
    }
    
    void NavbarController.populateEditForm(Model uiModel, Navbar navbar) {
        uiModel.addAttribute("navbar", navbar);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("affiliates", Affiliate.findAllAffiliates());
        uiModel.addAttribute("locales", Locale.findAllLocales());
    }
    
    String NavbarController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
