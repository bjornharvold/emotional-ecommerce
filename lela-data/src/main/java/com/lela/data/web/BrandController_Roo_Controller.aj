// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lela.data.web;

import com.lela.data.domain.entity.Brand;
import com.lela.data.domain.entity.BrandCategory;
import com.lela.data.domain.entity.BrandCategoryMotivator;
import com.lela.data.domain.entity.BrandCountry;
import com.lela.data.domain.entity.BrandHistory;
import com.lela.data.domain.entity.BrandIdentifier;
import com.lela.data.domain.entity.BrandMotivator;
import com.lela.data.domain.entity.BrandName;
import com.lela.data.domain.entity.Manufacturer;
import com.lela.data.web.BrandController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect BrandController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String BrandController.create(@Valid Brand brand, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, brand);
            return "crud/brands/create";
        }
        uiModel.asMap().clear();
        brand.persist();
        return "redirect:/crud/brands/" + encodeUrlPathSegment(brand.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String BrandController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Brand());
        return "crud/brands/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String BrandController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("brand", Brand.findBrand(id));
        uiModel.addAttribute("itemId", id);
        return "crud/brands/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String BrandController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("brands", Brand.findBrandEntries(firstResult, sizeNo));
            float nrOfPages = (float) Brand.countBrands() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("brands", Brand.findAllBrands());
        }
        addDateTimeFormatPatterns(uiModel);
        return "crud/brands/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String BrandController.update(@Valid Brand brand, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, brand);
            return "crud/brands/update";
        }
        uiModel.asMap().clear();
        brand.merge();
        return "redirect:/crud/brands/" + encodeUrlPathSegment(brand.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String BrandController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Brand.findBrand(id));
        return "crud/brands/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String BrandController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Brand brand = Brand.findBrand(id);
        brand.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/crud/brands";
    }
    
    void BrandController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("brand_datecreated_date_format", "yyy-MM-dd hh:mm:ss a");
        uiModel.addAttribute("brand_datemodified_date_format", "yyy-MM-dd hh:mm:ss a");
    }
    
    void BrandController.populateEditForm(Model uiModel, Brand brand) {
        uiModel.addAttribute("brand", brand);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("brandcategorys", BrandCategory.findAllBrandCategorys());
        uiModel.addAttribute("brandcategorymotivators", BrandCategoryMotivator.findAllBrandCategoryMotivators());
        uiModel.addAttribute("brandcountrys", BrandCountry.findAllBrandCountrys());
        uiModel.addAttribute("brandhistorys", BrandHistory.findAllBrandHistorys());
        uiModel.addAttribute("brandidentifiers", BrandIdentifier.findAllBrandIdentifiers());
        uiModel.addAttribute("brandmotivators", BrandMotivator.findAllBrandMotivators());
        uiModel.addAttribute("brandnames", BrandName.findAllBrandNames());
        uiModel.addAttribute("manufacturers", Manufacturer.findAllManufacturers());
    }
    
    String BrandController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
